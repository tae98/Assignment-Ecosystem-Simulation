#BlueJ class context
comment0.target=Field
comment0.text=\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\n\ Each\ position\ is\ able\ to\ store\ a\ single\ animal.\n\ \n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00C3\u00B6lling\n\ @version\ 2016.02.29\n
comment1.params=depth\ width
comment1.target=Field(int,\ int)
comment1.text=\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\n\ @param\ depth\ The\ depth\ of\ the\ field.\n\ @param\ width\ The\ width\ of\ the\ field.\n
comment10.params=
comment10.target=void\ clear()
comment10.text=\n\ Empty\ the\ field.\n
comment11.params=position
comment11.target=void\ clear(Position)
comment11.text=\n\ Clear\ the\ given\ position.\n\ @param\ position\ The\ position\ to\ clear.\n
comment12.params=animal\ row\ col
comment12.target=void\ place(java.lang.Object,\ int,\ int)
comment12.text=\n\ Place\ an\ animal\ at\ the\ given\ position.\n\ If\ there\ is\ already\ an\ animal\ at\ the\ position\ it\ will\n\ be\ lost.\n\ @param\ animal\ The\ animal\ to\ be\ placed.\n\ @param\ row\ Row\ coordinate\ of\ the\ position.\n\ @param\ col\ Column\ coordinate\ of\ the\ position.\n
comment13.params=animal\ position
comment13.target=void\ place(java.lang.Object,\ Position)
comment13.text=\n\ Place\ an\ animal\ at\ the\ given\ position.\n\ If\ there\ is\ already\ an\ animal\ at\ the\ position\ it\ will\n\ be\ lost.\n\ @param\ animal\ The\ animal\ to\ be\ placed.\n\ @param\ position\ Where\ to\ place\ the\ animal.\n
comment14.params=position
comment14.target=java.lang.Object\ getObjectAt(Position)
comment14.text=\n\ Return\ the\ animal\ at\ the\ given\ position,\ if\ any.\n\ @param\ position\ Where\ in\ the\ field.\n\ @return\ The\ animal\ at\ the\ given\ position,\ or\ null\ if\ there\ is\ none.\n
comment15.params=row\ col
comment15.target=java.lang.Object\ getObjectAt(int,\ int)
comment15.text=\n\ Return\ the\ animal\ at\ the\ given\ position,\ if\ any.\n\ @param\ row\ The\ desired\ row.\n\ @param\ col\ The\ desired\ column.\n\ @return\ The\ animal\ at\ the\ given\ position,\ or\ null\ if\ there\ is\ none.\n
comment16.params=position
comment16.target=Position\ randomAdjacentPosition(Position)
comment16.text=\n\ Generate\ a\ random\ position\ that\ is\ adjacent\ to\ the\n\ given\ position,\ or\ is\ the\ same\ position.\n\ The\ returned\ position\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ position\ The\ position\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ position\ within\ the\ grid\ area.\n
comment17.params=position\ potentialWalkable
comment17.target=java.util.List\ getFreeAdjacentPositions(Position,\ Organism)
comment17.text=\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ positions.\n\ There\ maybe\ some\ requirement\ as\ to\ how\ a\ free\ space\ is\ obtained\ \n\ @param\ position\ Get\ positions\ adjacent\ to\ this.\n\ @return\ A\ list\ of\ free\ adjacent\ positions.\n
comment18.params=position\ potentialWalkable
comment18.target=Position\ freeAdjacentPosition(Position,\ Organism)
comment18.text=\n\ Try\ to\ find\ a\ free\ position\ that\ is\ adjacent\ to\ the\n\ given\ position.\ If\ there\ is\ none,\ return\ null.\n\ The\ returned\ position\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ position\ The\ position\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ position\ within\ the\ grid\ area.\n
comment19.params=position
comment19.target=java.util.List\ adjacentPositions(Position)
comment19.text=\n\ Return\ a\ shuffled\ list\ of\ positions\ adjacent\ to\ the\ given\ one.\n\ The\ list\ will\ not\ include\ the\ position\ itself.\n\ All\ positions\ will\ lie\ within\ the\ grid.\n\ @param\ position\ The\ position\ from\ which\ to\ generate\ adjacencies.\n\ @return\ A\ list\ of\ positions\ adjacent\ to\ that\ given.\n
comment2.params=step
comment2.target=void\ time(int)
comment2.text=\n\ Calculates\ time\ based\ on\ steps\n\ This\ uses\ base\ 100\ for\ day,\ noon\ and\ night\ time\n
comment20.params=
comment20.target=int\ getDepth()
comment20.text=\n\ Return\ the\ depth\ of\ the\ field.\n\ @return\ The\ depth\ of\ the\ field.\n
comment21.params=
comment21.target=int\ getWidth()
comment21.text=\n\ Return\ the\ width\ of\ the\ field.\n\ @return\ The\ width\ of\ the\ field.\n
comment3.params=
comment3.target=java.lang.String\ getTime()
comment3.text=\n\ Returns\ the\ time\ of\ the\ field\n
comment4.params=
comment4.target=WeatherState\ getWeather()
comment4.text=\n\ Returns\ the\ weather\ of\ the\ field\n
comment5.params=
comment5.target=void\ changeWeather()
comment5.text=\n\ Change\ the\ weather\ of\ the\ field\n
comment6.params=walkable
comment6.target=void\ addWalkable(java.lang.Object)
comment6.text=\n\ Add\ plants\ to\ field\n
comment7.params=path
comment7.target=boolean\ existingWalkable(Position)
comment7.text=\n\ Checks\ if\ a\ plant\ already\ exist\ within\ the\ list\n
comment8.params=walkable
comment8.target=void\ removeWalkable(java.lang.Object)
comment8.text=\n\ Remove\ plant\ from\ list\ using\ remove\ from\ array\ list\n\ A\ modification\ was\ required\ in\ the\ Organism\ class\ to\ allow\n\ the\ remove\ method\ to\ function\ properly\n
comment9.params=l
comment9.target=java.lang.Object\ getWalkable(Position)
comment9.text=\n\ Returns\ a\ plant\ by\ position\n
numComments=22
